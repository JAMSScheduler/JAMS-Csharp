using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using MVPSI.JAMS.Host;
 

namespace JAMSIntegratedDll
{
 public class JAMSExecute : IJAMSHost
  {
 private FileStream fs;
 private FinalResults results;
 

  #region IJAMSHost Members
 

 public void Initialize(IServiceProvider serviceProvider, Dictionary<string, object> attributes,
 Dictionary<string, object> parameters)
  {
  results = new FinalResults();
 //Initialize the text file.
   try
  {
  fs = new FileStream(parameters["FileName"].ToString(), FileMode.Create);
  }
 catch (Exception ex)
  {
 //An error occured during Initialize method
  WriteErrorInfo(ex, "Initialize");
  }
  }
 

 public FinalResults Execute(IServiceProvider serviceProvider, Dictionary<string, object> attributes,
 Dictionary<string, object> parameters)
  {
 //If there were no errors during Initialize
 if (results.FinalSeverity != 3)
  {
 //Execute the job.
 try
  {
 var encoding = new ASCIIEncoding();
 byte[] bytes = encoding.GetBytes(parameters["Message"].ToString());
  fs.Write(bytes, 0, bytes.Length);
 

 //No errors occured
  results.FinalSeverity = 0;
  results.FinalStatus = "The operation completed successfully";
  results.FinalStatusCode = 0;
  }
 catch (Exception ex)
  {
 //An error occured during execution
  WriteErrorInfo(ex, "Execute");
  }
  }
 

 return results;
  }

 public void Cleanup(IServiceProvider serviceProvider, Dictionary<string, object> attributes,
 Dictionary<string, object> parameters)
  {
 //Dispose of the FileStream
 if (fs != null)
  {
  fs.Dispose();
  }
  }
 

  #endregion
 

 private void WriteErrorInfo(Exception ex, string methodName)
  {
 //Any messages written to the Console will appear in the JAMS Job log
 Console.WriteLine(ex.ToString());
  results.FinalSeverity = 3;
  results.FinalStatus = "Execption occured during " + methodName;
  results.FinalStatusCode = 1;
  }
  }
}
